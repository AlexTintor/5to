import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.*;

public class Calculadora extends JFrame implements ActionListener {
    private JTextField display;
    private JPanel panelBotones;
    private JButton[] botonesNumeros = new JButton[10];
    private JButton[] botonesOperaciones = new JButton[4];
    private JButton botonIgual;
    private JButton botonAC;
    private JButton botonC, botonMod;
    private JButton botonPunto;
    private String operacion;
    private double valor1;
    private boolean nuevaOperacion;
    private boolean errorMostrado;

    public Calculadora() {
        setTitle("Calculadora");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(300, 400);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());
        display();
        botones();
        setVisible(true);
    }

    public void display() {
        display = new JTextField();
        display.setEditable(true);
        display.setPreferredSize(new Dimension(50, 100));
        display.setHorizontalAlignment(SwingConstants.RIGHT);

        // Agregar KeyListener para permitir solo números y operadores
        display.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c) && c != '+' && c != '-' && c != '*' && c != '/' && c != '.' && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
            }
        });

        add(display, BorderLayout.NORTH);
    }

    public void botones() {
        panelBotones = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.BOTH;

        // Ajuste del tamaño de los botones
        Dimension buttonSize = new Dimension(100, 100);

        // Botones Operacionales (+, -, *, /)
        String[] simbolos = { "+", "-", "x", "/" };
        for (int i = 0; i < botonesOperaciones.length; i++) {
            botonesOperaciones[i] = new JButton(simbolos[i]);
            botonesOperaciones[i].setPreferredSize(buttonSize);
            botonesOperaciones[i].addActionListener(this);
            gbc.gridx = i;
            gbc.gridy = 0;
            panelBotones.add(botonesOperaciones[i], gbc);
        }

        // Botones numéricos (7, 8, 9)
        gbc.gridy = 1;
        for (int i = 7; i <= 9; i++) {
            botonesNumeros[i] = new JButton("" + i);
            botonesNumeros[i].setPreferredSize(buttonSize);
            botonesNumeros[i].addActionListener(this);
            gbc.gridx = i - 7;
            panelBotones.add(botonesNumeros[i], gbc);
        }

        // Botón AC
        botonAC = new JButton("AC");
        botonAC.setPreferredSize(buttonSize);
        botonAC.addActionListener(this);
        gbc.gridx = 3; // Posición en la última columna de la fila
        gbc.gridy = 1; // Mantener en la segunda fila
        panelBotones.add(botonAC, gbc);
        
        // Botón Mod
        botonMod = new JButton("Mod");
        botonMod.setPreferredSize(buttonSize);
        botonMod.addActionListener(this);
        gbc.gridx = 3; // Posición en la última columna de la fila
        gbc.gridy = 2; // Mantener en la segunda fila
        panelBotones.add(botonMod, gbc);

        // Botones numéricos (4, 5, 6)
        gbc.gridy = 2;
        for (int i = 4; i <= 6; i++) {
            botonesNumeros[i] = new JButton("" + i);
            botonesNumeros[i].setPreferredSize(buttonSize);
            botonesNumeros[i].addActionListener(this);
            gbc.gridx = i - 4;
            panelBotones.add(botonesNumeros[i], gbc);
        }

        // Botones numéricos (1, 2, 3)
        gbc.gridy = 3;
        for (int i = 1; i <= 3; i++) {
            botonesNumeros[i] = new JButton("" + i);
            botonesNumeros[i].setPreferredSize(buttonSize);
            botonesNumeros[i].addActionListener(this);
            gbc.gridx = i - 1;
            panelBotones.add(botonesNumeros[i], gbc);
        }

        // Botón Igual
        botonIgual = new JButton("=");
        botonIgual.setPreferredSize(buttonSize);
        botonIgual.addActionListener(this);
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.gridheight = 2;
        panelBotones.add(botonIgual, gbc);
        gbc.gridheight = 1;

        // Botón numérico 0 y punto (.)
        gbc.gridy = 4;
        gbc.gridx = 1;
        botonesNumeros[0] = new JButton("0");
        botonesNumeros[0].setPreferredSize(buttonSize);
        botonesNumeros[0].addActionListener(this);
        panelBotones.add(botonesNumeros[0], gbc);

        gbc.gridx = 2;
        botonPunto = new JButton(".");
        botonPunto.setPreferredSize(buttonSize);
        botonPunto.addActionListener(this);
        panelBotones.add(botonPunto, gbc);

        // Botón C para borrar uno por uno
        gbc.gridx = 0;
        gbc.gridy = 4;
        botonC = new JButton("C");
        botonC.setPreferredSize(buttonSize);
        botonC.addActionListener(this);
        panelBotones.add(botonC, gbc);

        add(panelBotones, BorderLayout.CENTER);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (errorMostrado) {
            display.setText("");
            errorMostrado = false;
        }

        // Botones numéricos
        for (int i = 0; i < botonesNumeros.length; i++) {
            if (e.getSource() == botonesNumeros[i]) {
                if (nuevaOperacion) {
                    display.setText("");
                    nuevaOperacion = false;
                }
                display.setText(display.getText() + botonesNumeros[i].getText());
                return;
            }
        }

        // Botones Operacionales
        for (int i = 0; i < botonesOperaciones.length; i++) {
            if (e.getSource() == botonesOperaciones[i]) {
                if (!display.getText().isEmpty()) {
                    if (operacion != null && !nuevaOperacion) {
                        realizarOperacion();
                    }
                    valor1 = Double.parseDouble(display.getText());
                    operacion = botonesOperaciones[i].getText();
                    nuevaOperacion = true;
                }
                return;
            }
        }

        // Botón igual
        if (e.getSource() == botonIgual) {
            if (operacion != null) {
                realizarOperacion();
                nuevaOperacion = true;
            }
        }

        // Botón AC (borra todo)
        if (e.getSource() == botonAC) {
            display.setText("");
            operacion = null;
            valor1 = 0;
            nuevaOperacion = false;
            return;
        }

        // Botón Mod (residuo de división)
        if (e.getSource() == botonMod) {
            if (!display.getText().isEmpty()) {
                if (operacion != null && !nuevaOperacion) {
                    realizarOperacion(); // Realiza la operación anterior
                }
                valor1 = Double.parseDouble(display.getText());
                operacion = "Mod"; // Establecer la operación como "Mod"
                nuevaOperacion = true;
            }
            return;
        }

        // Botón C (borrar uno por uno)
        if (e.getSource() == botonC) {
            borrarUltimoCaracter();
        }

        // Botón punto (.)
        if (e.getSource() == botonPunto) {
            if (!display.getText().contains(".")) {
                display.setText(display.getText() + ".");
            }
        }
    }

    private void realizarOperacion() {
        if (operacion == null) {
            return; // Salir si no hay operación
        }
        
        double resultado = 0;
        double valor2 = Double.parseDouble(display.getText());
        
        switch (operacion) {
            case "+":
                resultado = valor1 + valor2;
                break;
            case "-":
                resultado = valor1 - valor2;
                break;
            case "x":
                resultado = valor1 * valor2;
                break;
            case "/":
                if (valor2 != 0) {
                    resultado = valor1 / valor2;
                } else {
                    display.setText("Error");
                    errorMostrado = true;
                    return;
                }
                break;
            case "Mod":
                resultado = valor1 % valor2; // Realiza la operación de módulo
                break;
        }
        
         // Muestra el resultado, sin el punto decimal si es un número entero
        if (resultado == (int) resultado) {
            display.setText(String.valueOf((int) resultado)); // Convierte a entero
        } else {
            display.setText(String.valueOf(resultado)); // Muestra el resultado como decimal
        }
    
    operacion = null; // Reinicia la operación
    }

    private void borrarUltimoCaracter() {
        String textoActual = display.getText();
        if (!textoActual.isEmpty()) {
            display.setText(textoActual.substring(0, textoActual.length() - 1));
        }
    }

    public static void main(String[] args) {
        new Calculadora();
    }
}
